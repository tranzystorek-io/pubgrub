initSidebarItems({"enum":[["Dependencies","An enum used by [DependencyProvider] that holds information about package dependencies. For each [Package] there is a [Range] of concrete versions it allows as a dependency."]],"fn":[["choose_package_with_fewest_versions","This is a helper function to make it easy to implement [DependencyProvider::choose_package_version]. It takes a function `list_available_versions` that takes a package and returns an iterator of the available versions in preference order. The helper finds the package from the `packages` argument with the fewest versions from `list_available_versions` contained in the constraints. Then takes that package and finds the first version contained in the constraints."],["resolve","Main function of the library. Finds a set of packages satisfying dependency bounds for a given package + version pair."]],"struct":[["OfflineDependencyProvider","A basic implementation of [DependencyProvider]."]],"trait":[["DependencyProvider","Trait that allows the algorithm to retrieve available packages and their dependencies. An implementor needs to be supplied to the [resolve] function."]],"type":[["DependencyConstraints","Subtype of [Dependencies] which holds information about all possible versions a given package can accept. There is a difference in semantics between an empty Map<P, Range> inside [DependencyConstraints] and [Dependencies::Unknown]: the former means the package has no dependencies and it is a known fact, while the latter means they could not be fetched by [DependencyProvider]."]]});